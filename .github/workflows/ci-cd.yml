name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main
      - 'feature/**'
  pull_request:
    branches:
      - develop
      - main

jobs:
  unit-tests:
    name: Run Backend Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23.5'
          check-latest: true
          cache: false

      - name: Install dependencies
        run: go mod tidy
        working-directory: backend

      - name: Run tests
        run: go test -v -coverprofile=coverage.out ./handlers/... ./services/...
        working-directory: backend
  
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000

    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: eu-north-1
      SONGS_TABLE: RendallaSongsTable
      DOCUMENTS_TABLE: RendallaDocumentsTable
      JWT_SECRET: dummy_jwt_secret
      JWT_EXPIRATION_HOURS: 72
      APP_PORT: 8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23.5'

      - name: Install dependencies
        run: go mod tidy
        working-directory: backend

      - name: List env variables
        run: printenv | sort
      - name: Run integration tests
        run: go test -tags=integration ./integration_tests/...
        working-directory: backend
      
  backend:
    name: Backend Build & Deploy
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23.5'
          check-latest: true
          cache: false

      - name: Verify Go version
        run: go version
        working-directory: backend

      - name: Install dependencies
        run: go mod tidy
        working-directory: backend

      - name: Build Go binary
        run: |
          ls -la
          if [ ! -d "backend" ]; then echo "Error: backend directory not found"; exit 1; fi
          cd backend
          go mod tidy
          mkdir -p build
          GOOS=linux GOARCH=amd64 go build -o build/bootstrap main.go
          cd build
          zip function.zip bootstrap

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Deploy Backend to AWS Lambda
        run: |
          aws lambda update-function-code --function-name RendallaBackend --zip-file fileb://backend/build/function.zip

  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Run tests
        run: npm run test
        working-directory: frontend

      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1      

      - name: Deploy Frontend to AWS S3
        run: |
          if [ ! -d "frontend/dist" ]; then echo "Error: frontend/dist directory not found"; exit 1; fi
          aws s3 sync frontend/dist s3://rendalla-bucket --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
